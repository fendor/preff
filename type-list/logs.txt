Build profile: -w ghc-8.10.7 -O1
In order, the following will be built (use -v for more details):
 - safe-mutation-plugin-0.1.0.0 (lib) (file Plugin.hs changed)
 - safe-mutation-0.1.0.0 (lib) (dependency rebuilt)
 - safe-mutation-0.1.0.0 (exe:safe-mutation) (dependency rebuilt)
Preprocessing library for safe-mutation-plugin-0.1.0.0..
Building library for safe-mutation-plugin-0.1.0.0..
[1 of 1] Compiling Plugin           ( Plugin.hs, /home/hugin/Documents/uni/thesis/session-types-experiment/safe-mutation/dist-newstyle/build/x86_64-linux/ghc-8.10.7/safe-mutation-plugin-0.1.0.0/build/Plugin.o, /home/hugin/Documents/uni/thesis/session-types-experiment/safe-mutation/dist-newstyle/build/x86_64-linux/ghc-8.10.7/safe-mutation-plugin-0.1.0.0/build/Plugin.dyn_o )

Plugin.hs:94:5: warning: [-Wunused-top-binds]
    Defined but not used: data constructor ‘OpEmpty’
   |
94 |   | OpEmpty
   |     ^^^^^^^

Plugin.hs:117:3: warning: [-Wincomplete-patterns]
    Pattern match(es) are non-exhaustive
    In an equation for ‘ppr’:
        Patterns not matched:
            OpConstraint OpEquality ((OpApp _ _):(OpApp _ _):_:_)
            OpConstraint OpEquality ((OpApp _ _):(OpVar _):_:_)
            OpConstraint OpEquality ((OpApp _ _):(OpLift _):_:_)
            OpConstraint OpEquality ((OpApp _ _):(OpMultiAppend _ _ _):_:_)
            ...
    |
117 |   ppr (OpConstraint OpEquality [t1, t2]) = ppr t1 <> text " ~ " <> ppr t2
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

Plugin.hs:139:3: warning: [-Wincomplete-patterns]
    Pattern match(es) are non-exhaustive
    In an equation for ‘ppr’: Patterns not matched: OpEmpty
    |
139 |   ppr OpDisequality = text "OpDisequality"
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

Plugin.hs:177:22: warning: [-Wunused-matches]
    Defined but not used: ‘a’
    |
177 |   ppr (OpMultiAppend a b args) = text "OpMultiAppend" <> brackets (ppr b) <> parens (interpp'SP args)
    |                      ^

Plugin.hs:179:15: warning: [-Wunused-matches]
    Defined but not used: ‘a’
    |
179 |   ppr (OpList a xs) = brackets (interpp'SP xs)
    |               ^

Plugin.hs:224:19: warning: [-Wunused-matches]
    Defined but not used: ‘a’
    |
224 |     OpMultiAppend a b [] -> deconvert s b
    |                   ^

Plugin.hs:242:1: warning: [-Wunused-top-binds]
    Defined but not used: ‘lookupId’
    |
242 | lookupId search_module name =
    | ^^^^^^^^

Plugin.hs:312:3: warning: [-Wunused-local-binds]
    Defined but not used: ‘t1'’
    |
312 |   t1' = getDirectiveVars t1
    |   ^^^

Plugin.hs:314:3: warning: [-Wunused-local-binds]
    Defined but not used: ‘t1''’
    |
314 |   t1'' = getVars t1
    |   ^^^^

Plugin.hs:321:14: warning: [-Wname-shadowing]
    This binding for ‘args’ shadows the existing binding
      bound at Plugin.hs:319:19
    |
321 |     (Just a, args) ->
    |              ^^^^

Plugin.hs:347:12: warning: [-Wunused-matches]
    Defined but not used: ‘st’
    |
347 | turnIntoCt st (ct, x)
    |            ^^

Plugin.hs:347:20: warning: [-Wunused-matches]
    Defined but not used: ‘x’
    |
347 | turnIntoCt st (ct, x)
    |                    ^

Plugin.hs:361:7: warning: [-Wname-shadowing]
    This binding for ‘span’ shadows the existing binding
      imported from ‘Prelude’ at Plugin.hs:16:1-28
      (and originally defined in ‘GHC.List’)
    |
361 |   let span = ctLocSpan loc
    |       ^^^^

Plugin.hs:361:7: warning: [-Wunused-local-binds]
    Defined but not used: ‘span’
    |
361 |   let span = ctLocSpan loc
    |       ^^^^

Plugin.hs:374:34: warning: [-Wunused-matches]
    Defined but not used: ‘a’
    |
374 | improveAux info (OpApp OpLookup [a, OpMultiAppend a' base xs, OpShift a'' base' i])
    |                                  ^

Plugin.hs:374:51: warning: [-Wunused-matches]
    Defined but not used: ‘a'’
    |
374 | improveAux info (OpApp OpLookup [a, OpMultiAppend a' base xs, OpShift a'' base' i])
    |                                                   ^^

Plugin.hs:374:71: warning: [-Wunused-matches]
    Defined but not used: ‘a''’
    |
374 | improveAux info (OpApp OpLookup [a, OpMultiAppend a' base xs, OpShift a'' base' i])
    |                                                                       ^^^

Plugin.hs:376:51: warning: [-Wunused-matches]
    Defined but not used: ‘a'’
    |
376 | improveAux info (OpApp OpLookup [a, OpMultiAppend a' (OpApp OpReplace [a''', OpVar base, c, d]) xs, e])
    |                                                   ^^

Plugin.hs:376:97: warning: [-Wunused-matches]
    Defined but not used: ‘xs’
    |
376 | improveAux info (OpApp OpLookup [a, OpMultiAppend a' (OpApp OpReplace [a''', OpVar base, c, d]) xs, e])
    |                                                                                                 ^^

Plugin.hs:380:54: warning: [-Wunused-matches]
    Defined but not used: ‘a'’
    |
380 | improveAux info (OpApp OpLookup [a, OpApp OpReplace [a', OpVar base, e', _], e]) -- = error $ show info
    |                                                      ^^

Plugin.hs:384:49: warning: [-Wunused-matches]
    Defined but not used: ‘a'’
    |
384 | improveAux _ (OpApp OpReplace [a, OpMultiAppend a' base xs, OpShift a'' base' i, x])
    |                                                 ^^

Plugin.hs:384:69: warning: [-Wunused-matches]
    Defined but not used: ‘a''’
    |
384 | improveAux _ (OpApp OpReplace [a, OpMultiAppend a' base xs, OpShift a'' base' i, x])
    |                                                                     ^^^

Plugin.hs:388:52: warning: [-Wunused-matches]
    Defined but not used: ‘a'’
    |
388 | improveAux _ (OpApp OpReplace [a, OpApp OpReplace [a', base, i', x'], i, x])
    |                                                    ^^

Plugin.hs:388:66: warning: [-Wunused-matches]
    Defined but not used: ‘x'’
    |
388 | improveAux _ (OpApp OpReplace [a, OpApp OpReplace [a', base, i', x'], i, x])
    |                                                                  ^^

Plugin.hs:390:31: warning: [-Wunused-matches]
    Defined but not used: ‘a’
    |
390 | improveAux _ (OpApp OpLookup [a, OpApp OpReplace [a', _, i', x'], i])
    |                               ^

Plugin.hs:390:51: warning: [-Wunused-matches]
    Defined but not used: ‘a'’
    |
390 | improveAux _ (OpApp OpLookup [a, OpApp OpReplace [a', _, i', x'], i])
    |                                                   ^^

Plugin.hs:392:49: warning: [-Wunused-matches]
    Defined but not used: ‘a'’
    |
392 | improveAux _ (OpApp OpReplace [a, OpMultiAppend a' (OpApp OpReplace [a''', base, c, d]) xs, OpShift a'' base' i, x])
    |                                                 ^^

Plugin.hs:392:101: warning: [-Wunused-matches]
    Defined but not used: ‘a''’
    |
392 | improveAux _ (OpApp OpReplace [a, OpMultiAppend a' (OpApp OpReplace [a''', base, c, d]) xs, OpShift a'' base' i, x])
    |                                                                                                     ^^^

Plugin.hs:394:31: warning: [-Wunused-matches]
    Defined but not used: ‘a’
    |
394 | improveAux _ (OpApp OpLookup [a, OpMultiAppend a' (OpApp OpReplace [a''', base, _, _]) xs, OpShift a'' base' i])
    |                               ^

Plugin.hs:394:48: warning: [-Wunused-matches]
    Defined but not used: ‘a'’
    |
394 | improveAux _ (OpApp OpLookup [a, OpMultiAppend a' (OpApp OpReplace [a''', base, _, _]) xs, OpShift a'' base' i])
    |                                                ^^

Plugin.hs:394:69: warning: [-Wunused-matches]
    Defined but not used: ‘a'''’
    |
394 | improveAux _ (OpApp OpLookup [a, OpMultiAppend a' (OpApp OpReplace [a''', base, _, _]) xs, OpShift a'' base' i])
    |                                                                     ^^^^

Plugin.hs:394:100: warning: [-Wunused-matches]
    Defined but not used: ‘a''’
    |
394 | improveAux _ (OpApp OpLookup [a, OpMultiAppend a' (OpApp OpReplace [a''', base, _, _]) xs, OpShift a'' base' i])
    |                                                                                                    ^^^

Plugin.hs:396:31: warning: [-Wunused-matches]
    Defined but not used: ‘a’
    |
396 | improveAux _ (OpApp OpLookup [a, OpMultiAppend a' (OpApp OpReplace [a''', base, i', x]) xs, i])
    |                               ^

Plugin.hs:396:48: warning: [-Wunused-matches]
    Defined but not used: ‘a'’
    |
396 | improveAux _ (OpApp OpLookup [a, OpMultiAppend a' (OpApp OpReplace [a''', base, i', x]) xs, i])
    |                                                ^^

Plugin.hs:396:69: warning: [-Wunused-matches]
    Defined but not used: ‘a'''’
    |
396 | improveAux _ (OpApp OpLookup [a, OpMultiAppend a' (OpApp OpReplace [a''', base, i', x]) xs, i])
    |                                                                     ^^^^

Plugin.hs:396:75: warning: [-Wunused-matches]
    Defined but not used: ‘base’
    |
396 | improveAux _ (OpApp OpLookup [a, OpMultiAppend a' (OpApp OpReplace [a''', base, i', x]) xs, i])
    |                                                                           ^^^^

Plugin.hs:396:89: warning: [-Wunused-matches]
    Defined but not used: ‘xs’
    |
396 | improveAux _ (OpApp OpLookup [a, OpMultiAppend a' (OpApp OpReplace [a''', base, i', x]) xs, i])
    |                                                                                         ^^

Plugin.hs:398:32: warning: [-Wunused-matches]
    Defined but not used: ‘a’
    |
398 | improveAux _ (OpApp OpReplace [a, OpMultiAppend a' (OpApp OpReplace [a''', base, i', _]) xs, i, x])
    |                                ^

Plugin.hs:400:40: warning: [-Wunused-matches]
    Defined but not used: ‘a'’
    |
400 | improveAux _ (OpShift a (OpMultiAppend a' base xs) i) =
    |                                        ^^

Plugin.hs:402:43: warning: [-Wunused-matches]
    Defined but not used: ‘a'’
    |
402 | improveAux _ (OpShift a (OpApp OpReplace [a', base, _, _]) i) =
    |                                           ^^

Plugin.hs:408:54: warning: [-Wunused-matches]
    Defined but not used: ‘xs’
    |
408 | improveAux _ (OpApp OpTake [a, OpMultiAppend a' base xs, OpShift a'' base' 0])
    |                                                      ^^

Plugin.hs:410:29: warning: [-Wunused-matches]
    Defined but not used: ‘a’
    |
410 | improveAux _ (OpApp OpTake [a, OpMultiAppend a' (OpApp OpReplace [a''', base, _, _]) xs, OpShift a'' base' 0])
    |                             ^

Plugin.hs:410:46: warning: [-Wunused-matches]
    Defined but not used: ‘a'’
    |
410 | improveAux _ (OpApp OpTake [a, OpMultiAppend a' (OpApp OpReplace [a''', base, _, _]) xs, OpShift a'' base' 0])
    |                                              ^^

Plugin.hs:410:67: warning: [-Wunused-matches]
    Defined but not used: ‘a'''’
    |
410 | improveAux _ (OpApp OpTake [a, OpMultiAppend a' (OpApp OpReplace [a''', base, _, _]) xs, OpShift a'' base' 0])
    |                                                                   ^^^^

Plugin.hs:410:86: warning: [-Wunused-matches]
    Defined but not used: ‘xs’
    |
410 | improveAux _ (OpApp OpTake [a, OpMultiAppend a' (OpApp OpReplace [a''', base, _, _]) xs, OpShift a'' base' 0])
    |                                                                                      ^^

Plugin.hs:410:98: warning: [-Wunused-matches]
    Defined but not used: ‘a''’
    |
410 | improveAux _ (OpApp OpTake [a, OpMultiAppend a' (OpApp OpReplace [a''', base, _, _]) xs, OpShift a'' base' 0])
    |                                                                                                  ^^^

Plugin.hs:426:42: warning: [-Wunused-matches]
    Defined but not used: ‘a'’
    |
426 | removeSingle (OpApp OpCons [a, x, OpList a' xs]) =
    |                                          ^^

Plugin.hs:430:1: warning: [-Wmissing-signatures]
    Top-level binding with no type signature:
      improve :: Info -> OpType -> OpType
    |
430 | improve uf = improveDown (improveAux uf)
    | ^^^^^^^

Plugin.hs:431:1: warning: [-Wmissing-signatures]
    Top-level binding with no type signature:
      improve' :: OpType -> OpType
    |
431 | improve' = improveDown removeSingle
    | ^^^^^^^^

Plugin.hs:436:14: warning: [-Wname-shadowing]
    This binding for ‘args'’ shadows the existing binding
      bound at Plugin.hs:442:3
    |
436 |     OpApp f' args' ->
    |              ^^^^^

Plugin.hs:480:1: warning: [-Woverlapping-patterns]
    Pattern match is redundant
    In an equation for ‘majorSimplify’: majorSimplify _ x = ...
    |
480 | majorSimplify _ x = x
    | ^^^^^^^^^^^^^^^^^^^^^

Plugin.hs:513:51: warning: [-Wunused-matches]
    Defined but not used: ‘a’
    |
513 | removeSimplify analysis (OpConstraint OpEquality [a, OpApp OpLookup [_, OpVar xs, i]])
    |                                                   ^

Plugin.hs:539:1: warning: [-Wmissing-signatures]
    Top-level binding with no type signature:
      getInfo :: [OpConstraintSet] -> Info
    |
539 | getInfo xs =
    | ^^^^^^^

Plugin.hs:568:1: warning: [-Wmissing-signatures]
    Top-level binding with no type signature:
      getUnionFindAll :: [OpConstraintSet] -> UnionFind
    |
568 | getUnionFindAll = constructTransform helper fold
    | ^^^^^^^^^^^^^^^

Plugin.hs:646:1: warning: [-Wmissing-signatures]
    Top-level binding with no type signature:
      maxFun :: OpFun -> OpFun -> OpFun
    |
646 | maxFun OpX _ = OpX
    | ^^^^^^

Plugin.hs:665:1: warning: [-Wunused-top-binds]
    Defined but not used: ‘getHelper3All’
    |
665 | getHelper3All = constructTransform helper (Map.unionsWith maxFun)
    | ^^^^^^^^^^^^^

Plugin.hs:684:70: warning: [-Wunused-matches]
    Defined but not used: ‘xs’
    |
684 |   helper (OpConstraint OpLeq [OpApp OpX [], OpApp OpLookup [_, OpVar xs, i]]) = emptyVarSet
    |                                                                      ^^

Plugin.hs:684:74: warning: [-Wunused-matches]
    Defined but not used: ‘i’
    |
684 |   helper (OpConstraint OpLeq [OpApp OpX [], OpApp OpLookup [_, OpVar xs, i]]) = emptyVarSet
    |                                                                          ^

Plugin.hs:685:70: warning: [-Wunused-matches]
    Defined but not used: ‘xs’
    |
685 |   helper (OpConstraint OpLeq [OpApp OpR [], OpApp OpLookup [_, OpVar xs, i]]) = emptyVarSet
    |                                                                      ^^

Plugin.hs:685:74: warning: [-Wunused-matches]
    Defined but not used: ‘i’
    |
685 |   helper (OpConstraint OpLeq [OpApp OpR [], OpApp OpLookup [_, OpVar xs, i]]) = emptyVarSet
    |                                                                          ^

Plugin.hs:704:16: warning: [-Wunused-matches]
    Defined but not used: ‘derived’
    |
704 | solve st given derived wanted = do
    |                ^^^^^^^

Plugin.hs:720:25: warning: [-Wunused-matches]
    Defined but not used: ‘a’
    |
720 |   let final = filter (\(a, b) -> hasChanged b) $ zip old result''
    |                         ^
Preprocessing library for safe-mutation-0.1.0.0..
Building library for safe-mutation-0.1.0.0..
[4 of 7] Compiling Store            ( src/Store.hs, /home/hugin/Documents/uni/thesis/session-types-experiment/safe-mutation/dist-newstyle/build/x86_64-linux/ghc-8.10.7/safe-mutation-0.1.0.0/build/Store.o, /home/hugin/Documents/uni/thesis/session-types-experiment/safe-mutation/dist-newstyle/build/x86_64-linux/ghc-8.10.7/safe-mutation-0.1.0.0/build/Store.dyn_o ) [Impure plugin forced recompilation]
---init---
what is given:
 [OpR ≤ fsk_a16R]
[OpR ≤ fsk_a16T]
[OpX ≤ fsk_a16R]
[OpX ≤ fsk_a16T]
[Lookup(OpAccessLevel, k, n1) ~ fsk_a16R]
[Lookup(OpAccessLevel, k, n2) ~ fsk_a16T]
what is requested:
 
what is relevant:
 Analysis {getHelper = fromList [(fsk_a16R,OpX),(fsk_a16T,OpX)], getHelper2 = fromList [], getHelper3 = fromList [((k,n1),OpX),((k,n2),OpX)], getHelper4 = fromList [], getHelper7 = fromList [(fsk_a16R,Lookup(OpAccessLevel, k, n1)),(fsk_a16T,Lookup(OpAccessLevel, k, n2))], getVarSet = k n1 n2 fsk_a16R fsk_a16T}
what is given:
 [OpR ≤ fsk_a1de]
[OpX ≤ fsk_a1de]
[Lookup(OpAccessLevel, j, n) ~ fsk_a1de]
what is requested:
 
what is relevant:
 Analysis {getHelper = fromList [(fsk_a1de,OpX)], getHelper2 = fromList [], getHelper3 = fromList [((j,n),OpX)], getHelper4 = fromList [], getHelper7 = fromList [(fsk_a1de,Lookup(OpAccessLevel, j, n))], getVarSet = j n fsk_a1de}
what is given:
 
what is requested:
 
what is relevant:
 Analysis {getHelper = fromList [], getHelper2 = fromList [], getHelper3 = fromList [], getHelper4 = fromList [], getHelper7 = fromList [], getVarSet = }
what is given:
 
what is requested:
 
what is relevant:
 Analysis {getHelper = fromList [], getHelper2 = fromList [], getHelper3 = fromList [], getHelper4 = fromList [], getHelper7 = fromList [], getVarSet = }
what is given:
 
what is requested:
 [OpAcceptableList(Append(OpAccessLevel, i, OpX), k, q'_a1g4)]
[OpR ≤ Lookup(OpAccessLevel,
              Append(OpAccessLevel, i, OpX),
              Len(OpAccessLevel, i))]
[OpX ≤ Lookup(OpAccessLevel,
              Append(OpAccessLevel, i, OpX),
              Len(OpAccessLevel, i))]
[OpX ≤ Lookup(OpAccessLevel, q'_a1g4, Len(OpAccessLevel, i))]
what is relevant:
 Analysis {getHelper = fromList [], getHelper2 = fromList [(q'_a1g4,fromList [OpShift(OpAccessLevel, i, 0)])], getHelper3 = fromList [((q'_a1g4,OpShift(OpAccessLevel, i, 0)),OpX)], getHelper4 = fromList [], getHelper7 = fromList [], getVarSet = i k}
---here---
what is proven:
 [WD] $dAcceptableList_a1g6 {0}:: AcceptableList
                                   (Append i 'X) k q'0 (CDictCan)
[WD] $d≤_a27e {0}:: 'R ≤ Lookup (Append i 'X) (Length i) (CDictCan)
[WD] $d≤_a27a {0}:: 'X ≤ Lookup (Append i 'X) (Length i) (CDictCan)
what is wanted:
 [OpAcceptable(Lookup(OpAccessLevel,
                     Append(OpAccessLevel, i, OpX),
                     OpShift(OpAccessLevel, i, 0)), Lookup(OpAccessLevel,
                                                           k,
                                                           OpShift(OpAccessLevel, i, 0)), Lookup(OpAccessLevel,
                                                                                                 q'_a1g4,
                                                                                                 OpShift(OpAccessLevel, i, 0)))]
[OpR ≤ OpX]
[OpX ≤ OpX]
what is given:
 
what is requested:
 [OpAcceptable(Lookup(OpAccessLevel,
                     Append(OpAccessLevel, i, OpX),
                     Len(OpAccessLevel, i)), Lookup(OpAccessLevel,
                                                    k,
                                                    Len(OpAccessLevel, i)), Lookup(OpAccessLevel,
                                                                                   q'_a1g4,
                                                                                   Len(OpAccessLevel,
                                                                                       i)))]
[OpX ≤ Lookup(OpAccessLevel, q'_a1g4, Len(OpAccessLevel, i))]
what is relevant:
 Analysis {getHelper = fromList [], getHelper2 = fromList [(q'_a1g4,fromList [OpShift(OpAccessLevel, i, 0)])], getHelper3 = fromList [((q'_a1g4,OpShift(OpAccessLevel, i, 0)),OpX)], getHelper4 = fromList [], getHelper7 = fromList [], getVarSet = i k}
---here---
what is proven:
 [WD] $dAcceptable_a27J {0}:: Acceptable
                               (Lookup (Append i 'X) (Length i))
                               (Lookup k (Length i))
                               (Lookup q'0 (Length i)) (CDictCan)
what is wanted:
 [OpX ≤ OpX,
 Lookup(OpAccessLevel, k, OpShift(OpAccessLevel, i, 0)) ~ OpN,
 Lookup(OpAccessLevel, q'_a1g4, OpShift(OpAccessLevel, i, 0)) ~ OpX]
what is given:
 
what is requested:
 [OpX ≤ Lookup(OpAccessLevel, q'_a1g4, Len(OpAccessLevel, i))]
[Lookup(OpAccessLevel, k, Len(OpAccessLevel, i)) ~ OpN]
[Lookup(OpAccessLevel, q'_a1g4, Len(OpAccessLevel, i)) ~ OpX]
what is relevant:
 Analysis {getHelper = fromList [], getHelper2 = fromList [(q'_a1g4,fromList [OpShift(OpAccessLevel, i, 0)])], getHelper3 = fromList [((q'_a1g4,OpShift(OpAccessLevel, i, 0)),OpX)], getHelper4 = fromList [((k,OpShift(OpAccessLevel, i, 0)),OpN),((q'_a1g4,OpShift(OpAccessLevel, i, 0)),OpX)], getHelper7 = fromList [], getVarSet = i k q'_a1g4}
---here---
what is proven:
 [W] $d≤_a27W {0}:: 'X ≤ Lookup q'0 (Length i) (CDictCan)
[WD] hole{co_a27S} {1}:: Lookup k (Length i) ~ 'N (CNonCanonical)
what is wanted:
 [OpX ≤ OpX] []
what is given:
 
what is requested:
 [Lookup(OpAccessLevel, q'_a1g4, Len(OpAccessLevel, i)) ~ OpX]
what is relevant:
 Analysis {getHelper = fromList [], getHelper2 = fromList [], getHelper3 = fromList [], getHelper4 = fromList [((q'_a1g4,OpShift(OpAccessLevel, i, 0)),OpX)], getHelper7 = fromList [], getVarSet = i q'_a1g4}
---here---
what is proven:
 [WD] hole{co_a282} {2}:: Lookup q'0 (Length i) ~ 'X (CNonCanonical)
what is wanted:
 []
what is given:
 [OpR ≤ fsk_a283]
[OpR ≤ fsk_a285]
[OpX ≤ fsk_a283]
[OpX ≤ fsk_a285]
[Lookup(OpAccessLevel, k, n1) ~ fsk_a283]
[Lookup(OpAccessLevel, k, n2) ~ fsk_a285]
what is requested:
 
what is relevant:
 Analysis {getHelper = fromList [(fsk_a283,OpX),(fsk_a285,OpX)], getHelper2 = fromList [], getHelper3 = fromList [((k,n1),OpX),((k,n2),OpX)], getHelper4 = fromList [], getHelper7 = fromList [(fsk_a283,Lookup(OpAccessLevel, k, n1)),(fsk_a285,Lookup(OpAccessLevel, k, n2))], getVarSet = k n1 n2 fsk_a283 fsk_a285}
what is given:
 
what is requested:
 [OpAcceptableList(Append(OpAccessLevel,
                         Append(OpAccessLevel, i, OpX),
                         OpX), k, q'_a1ik)]
[OpR ≤ Lookup(OpAccessLevel, q'_a1ik, Len(OpAccessLevel, i))]
[OpR ≤ Lookup(OpAccessLevel,
              q'_a1ik,
              Len(OpAccessLevel, Append(OpAccessLevel, i, OpX)))]
[OpX ≤ Lookup(OpAccessLevel, q'_a1ik, Len(OpAccessLevel, i))]
[OpX ≤ Lookup(OpAccessLevel,
              q'_a1ik,
              Len(OpAccessLevel, Append(OpAccessLevel, i, OpX)))]
what is relevant:
 Analysis {getHelper = fromList [], getHelper2 = fromList [(q'_a1ik,fromList [OpShift(OpAccessLevel, i, 0),OpShift(OpAccessLevel, i, 1)])], getHelper3 = fromList [((q'_a1ik,OpShift(OpAccessLevel, i, 0)),OpX),((q'_a1ik,OpShift(OpAccessLevel, i, 1)),OpX)], getHelper4 = fromList [], getHelper7 = fromList [], getVarSet = i k}
---here---
what is proven:
 [WD] $dAcceptableList_a1im {0}:: AcceptableList
                                   (Append (Append i 'X) 'X) k q'0 (CDictCan)
[WD] $d≤_a28s {0}:: 'R
                    ≤ Lookup q'0 (Length (Append i 'X)) (CDictCan)
[WD] $d≤_a28u {0}:: 'X
                    ≤ Lookup q'0 (Length (Append i 'X)) (CDictCan)
what is wanted:
 [OpAcceptable(Lookup(OpAccessLevel,
                     Append(OpAccessLevel, Append(OpAccessLevel, i, OpX), OpX),
                     OpShift(OpAccessLevel, i, 0)), Lookup(OpAccessLevel,
                                                           k,
                                                           OpShift(OpAccessLevel, i, 0)), Lookup(OpAccessLevel,
                                                                                                 q'_a1ik,
                                                                                                 OpShift(OpAccessLevel, i, 0))),
 OpAcceptable(Lookup(OpAccessLevel,
                     Append(OpAccessLevel, Append(OpAccessLevel, i, OpX), OpX),
                     OpShift(OpAccessLevel, i, 1)), Lookup(OpAccessLevel,
                                                           k,
                                                           OpShift(OpAccessLevel, i, 1)), Lookup(OpAccessLevel,
                                                                                                 q'_a1ik,
                                                                                                 OpShift(OpAccessLevel, i, 1)))]
[OpR ≤ Lookup(OpAccessLevel,
              q'_a1ik,
              OpShift(OpAccessLevel, i, 1))]
[OpX ≤ Lookup(OpAccessLevel,
              q'_a1ik,
              OpShift(OpAccessLevel, i, 1))]
what is given:
 
what is requested:
 [OpAcceptable(Lookup(OpAccessLevel,
                     Append(OpAccessLevel, Append(OpAccessLevel, i, OpX), OpX),
                     Len(OpAccessLevel, i)), Lookup(OpAccessLevel,
                                                    k,
                                                    Len(OpAccessLevel, i)), Lookup(OpAccessLevel,
                                                                                   q'_a1ik,
                                                                                   Len(OpAccessLevel,
                                                                                       i)))]
[OpAcceptable(Lookup(OpAccessLevel,
                     Append(OpAccessLevel, Append(OpAccessLevel, i, OpX), OpX),
                     S(Len(OpAccessLevel, i))), Lookup(OpAccessLevel,
                                                       k,
                                                       S(Len(OpAccessLevel,
                                                             i))), Lookup(OpAccessLevel,
                                                                          q'_a1ik,
                                                                          S(Len(OpAccessLevel,
                                                                                i))))]
[OpR ≤ Lookup(OpAccessLevel, q'_a1ik, S(Len(OpAccessLevel, i)))]
[OpR ≤ Lookup(OpAccessLevel, q'_a1ik, Len(OpAccessLevel, i))]
[OpX ≤ Lookup(OpAccessLevel, q'_a1ik, S(Len(OpAccessLevel, i)))]
[OpX ≤ Lookup(OpAccessLevel, q'_a1ik, Len(OpAccessLevel, i))]
what is relevant:
 Analysis {getHelper = fromList [], getHelper2 = fromList [(q'_a1ik,fromList [OpShift(OpAccessLevel, i, 0),OpShift(OpAccessLevel, i, 1)])], getHelper3 = fromList [((q'_a1ik,OpShift(OpAccessLevel, i, 0)),OpX),((q'_a1ik,OpShift(OpAccessLevel, i, 1)),OpX)], getHelper4 = fromList [], getHelper7 = fromList [], getVarSet = i k}
---here---
what is proven:
 [WD] $dAcceptable_a28L {0}:: Acceptable
                               (Lookup (Append (Append i 'X) 'X) (Length i))
                               (Lookup k (Length i))
                               (Lookup q'0 (Length i)) (CDictCan)
[WD] $dAcceptable_a28S {0}:: Acceptable
                               (Lookup (Append (Append i 'X) 'X) ('S (Length i)))
                               (Lookup k ('S (Length i)))
                               (Lookup q'0 ('S (Length i))) (CDictCan)
what is wanted:
 [OpX ≤ OpX,
 Lookup(OpAccessLevel, k, OpShift(OpAccessLevel, i, 0)) ~ OpN,
 Lookup(OpAccessLevel, q'_a1ik, OpShift(OpAccessLevel, i, 0)) ~ OpX]
[OpX ≤ OpX,
 Lookup(OpAccessLevel, k, OpShift(OpAccessLevel, i, 1)) ~ OpN,
 Lookup(OpAccessLevel, q'_a1ik, OpShift(OpAccessLevel, i, 1)) ~ OpX]
what is given:
 
what is requested:
 [OpR ≤ Lookup(OpAccessLevel, q'_a1ik, S(Len(OpAccessLevel, i)))]
[OpR ≤ Lookup(OpAccessLevel, q'_a1ik, Len(OpAccessLevel, i))]
[OpX ≤ Lookup(OpAccessLevel, q'_a1ik, S(Len(OpAccessLevel, i)))]
[OpX ≤ Lookup(OpAccessLevel, q'_a1ik, Len(OpAccessLevel, i))]
[Lookup(OpAccessLevel, k, S(Len(OpAccessLevel, i))) ~ OpN]
[Lookup(OpAccessLevel, k, Len(OpAccessLevel, i)) ~ OpN]
[Lookup(OpAccessLevel, q'_a1ik, Len(OpAccessLevel, i)) ~ OpX]
[Lookup(OpAccessLevel, q'_a1ik, S(Len(OpAccessLevel, i))) ~ OpX]
what is relevant:
 Analysis {getHelper = fromList [], getHelper2 = fromList [(q'_a1ik,fromList [OpShift(OpAccessLevel, i, 0),OpShift(OpAccessLevel, i, 1)])], getHelper3 = fromList [((q'_a1ik,OpShift(OpAccessLevel, i, 0)),OpX),((q'_a1ik,OpShift(OpAccessLevel, i, 1)),OpX)], getHelper4 = fromList [((k,OpShift(OpAccessLevel, i, 0)),OpN),((k,OpShift(OpAccessLevel, i, 1)),OpN),((q'_a1ik,OpShift(OpAccessLevel, i, 0)),OpX),((q'_a1ik,OpShift(OpAccessLevel, i, 1)),OpX)], getHelper7 = fromList [], getVarSet = i k q'_a1ik}
---here---
what is proven:
 [W] $d≤_a29h {0}:: 'R ≤ Lookup q'0 ('S (Length i)) (CDictCan)
[W] $d≤_a29i {0}:: 'R ≤ Lookup q'0 (Length i) (CDictCan)
[W] $d≤_a29j {0}:: 'X ≤ Lookup q'0 ('S (Length i)) (CDictCan)
[W] $d≤_a29k {0}:: 'X ≤ Lookup q'0 (Length i) (CDictCan)
[WD] hole{co_a29d} {1}:: Lookup k ('S (Length i))
                         ~ 'N (CNonCanonical)
[WD] hole{co_a297} {1}:: Lookup k (Length i) ~ 'N (CNonCanonical)
what is wanted:
 [OpR ≤ OpX] [OpR ≤ OpX] [OpX ≤ OpX] [OpX ≤ OpX] [] []
what is given:
 
what is requested:
 [Lookup(OpAccessLevel, q'_a1ik, Len(OpAccessLevel, i)) ~ OpX]
[Lookup(OpAccessLevel, q'_a1ik, S(Len(OpAccessLevel, i))) ~ OpX]
what is relevant:
 Analysis {getHelper = fromList [], getHelper2 = fromList [], getHelper3 = fromList [], getHelper4 = fromList [((q'_a1ik,OpShift(OpAccessLevel, i, 0)),OpX),((q'_a1ik,OpShift(OpAccessLevel, i, 1)),OpX)], getHelper7 = fromList [], getVarSet = i q'_a1ik}
---here---
what is proven:
 [WD] hole{co_a29t} {2}:: Lookup q'0 (Length i) ~ 'X (CNonCanonical)
[WD] hole{co_a29w} {2}:: Lookup q'0 ('S (Length i))
                         ~ 'X (CNonCanonical)
what is wanted:
 [] []
what is given:
 
what is requested:
 
what is relevant:
 Analysis {getHelper = fromList [], getHelper2 = fromList [], getHelper3 = fromList [], getHelper4 = fromList [], getHelper7 = fromList [], getVarSet = }
what is given:
 [OpR ≤ fsk_a29x]
[OpX ≤ fsk_a29x]
[Lookup(OpAccessLevel, j, n) ~ fsk_a29x]
what is requested:
 
what is relevant:
 Analysis {getHelper = fromList [(fsk_a29x,OpX)], getHelper2 = fromList [], getHelper3 = fromList [((j,n),OpX)], getHelper4 = fromList [], getHelper7 = fromList [(fsk_a29x,Lookup(OpAccessLevel, j, n))], getVarSet = j n fsk_a29x}
what is given:
 
what is requested:
 
what is relevant:
 Analysis {getHelper = fromList [], getHelper2 = fromList [], getHelper3 = fromList [], getHelper4 = fromList [], getHelper7 = fromList [], getVarSet = }
what is given:
 
what is requested:
 [OpAcceptableList(Append(OpAccessLevel, i, OpX), k, q'_a26i)]
[OpR ≤ Lookup(OpAccessLevel, q'_a26i, Len(OpAccessLevel, i))]
[OpX ≤ Lookup(OpAccessLevel, q'_a26i, Len(OpAccessLevel, i))]
what is relevant:
 Analysis {getHelper = fromList [], getHelper2 = fromList [(q'_a26i,fromList [OpShift(OpAccessLevel, i, 0)])], getHelper3 = fromList [((q'_a26i,OpShift(OpAccessLevel, i, 0)),OpX)], getHelper4 = fromList [], getHelper7 = fromList [], getVarSet = i k}
---here---
what is proven:
 [WD] $dAcceptableList_a26k {0}:: AcceptableList
                                   (Append i 'X) k q'0 (CDictCan)
what is wanted:
 [OpAcceptable(Lookup(OpAccessLevel,
                     Append(OpAccessLevel, i, OpX),
                     OpShift(OpAccessLevel, i, 0)), Lookup(OpAccessLevel,
                                                           k,
                                                           OpShift(OpAccessLevel, i, 0)), Lookup(OpAccessLevel,
                                                                                                 q'_a26i,
                                                                                                 OpShift(OpAccessLevel, i, 0)))]
what is given:
 
what is requested:
 [OpAcceptable(Lookup(OpAccessLevel,
                     Append(OpAccessLevel, i, OpX),
                     Len(OpAccessLevel, i)), Lookup(OpAccessLevel,
                                                    k,
                                                    Len(OpAccessLevel, i)), Lookup(OpAccessLevel,
                                                                                   q'_a26i,
                                                                                   Len(OpAccessLevel,
                                                                                       i)))]
[OpR ≤ Lookup(OpAccessLevel, q'_a26i, Len(OpAccessLevel, i))]
[OpX ≤ Lookup(OpAccessLevel, q'_a26i, Len(OpAccessLevel, i))]
what is relevant:
 Analysis {getHelper = fromList [], getHelper2 = fromList [(q'_a26i,fromList [OpShift(OpAccessLevel, i, 0)])], getHelper3 = fromList [((q'_a26i,OpShift(OpAccessLevel, i, 0)),OpX)], getHelper4 = fromList [], getHelper7 = fromList [], getVarSet = i k}
---here---
what is proven:
 [WD] $dAcceptable_a29Y {0}:: Acceptable
                               (Lookup (Append i 'X) (Length i))
                               (Lookup k (Length i))
                               (Lookup q'0 (Length i)) (CDictCan)
what is wanted:
 [OpX ≤ OpX,
 Lookup(OpAccessLevel, k, OpShift(OpAccessLevel, i, 0)) ~ OpN,
 Lookup(OpAccessLevel, q'_a26i, OpShift(OpAccessLevel, i, 0)) ~ OpX]
what is given:
 
what is requested:
 [OpR ≤ Lookup(OpAccessLevel, q'_a26i, Len(OpAccessLevel, i))]
[OpX ≤ Lookup(OpAccessLevel, q'_a26i, Len(OpAccessLevel, i))]
[Lookup(OpAccessLevel, k, Len(OpAccessLevel, i)) ~ OpN]
[Lookup(OpAccessLevel, q'_a26i, Len(OpAccessLevel, i)) ~ OpX]
what is relevant:
 Analysis {getHelper = fromList [], getHelper2 = fromList [(q'_a26i,fromList [OpShift(OpAccessLevel, i, 0)])], getHelper3 = fromList [((q'_a26i,OpShift(OpAccessLevel, i, 0)),OpX)], getHelper4 = fromList [((k,OpShift(OpAccessLevel, i, 0)),OpN),((q'_a26i,OpShift(OpAccessLevel, i, 0)),OpX)], getHelper7 = fromList [], getVarSet = i k q'_a26i}
---here---
what is proven:
 [W] $d≤_a2ac {0}:: 'R ≤ Lookup q'0 (Length i) (CDictCan)
[W] $d≤_a2ad {0}:: 'X ≤ Lookup q'0 (Length i) (CDictCan)
[WD] hole{co_a2a8} {1}:: Lookup k (Length i) ~ 'N (CNonCanonical)
what is wanted:
 [OpR ≤ OpX] [OpX ≤ OpX] []
what is given:
 
what is requested:
 [Lookup(OpAccessLevel, q'_a26i, Len(OpAccessLevel, i)) ~ OpX]
what is relevant:
 Analysis {getHelper = fromList [], getHelper2 = fromList [], getHelper3 = fromList [], getHelper4 = fromList [((q'_a26i,OpShift(OpAccessLevel, i, 0)),OpX)], getHelper7 = fromList [], getVarSet = i q'_a26i}
---here---
what is proven:
 [WD] hole{co_a2ak} {2}:: Lookup q'0 (Length i) ~ 'X (CNonCanonical)
what is wanted:
 []
[7 of 7] Compiling Arrays           ( src/Arrays.hs, /home/hugin/Documents/uni/thesis/session-types-experiment/safe-mutation/dist-newstyle/build/x86_64-linux/ghc-8.10.7/safe-mutation-0.1.0.0/build/Arrays.o, /home/hugin/Documents/uni/thesis/session-types-experiment/safe-mutation/dist-newstyle/build/x86_64-linux/ghc-8.10.7/safe-mutation-0.1.0.0/build/Arrays.dyn_o ) [Impure plugin forced recompilation]
---init---
what is given:
 [OpX ≤ fsk_a3p1] [Lookup(OpAccessLevel, p, n) ~ fsk_a3p1]
what is requested:
 
what is relevant:
 Analysis {getHelper = fromList [(fsk_a3p1,OpX)], getHelper2 = fromList [], getHelper3 = fromList [((p,n),OpX)], getHelper4 = fromList [], getHelper7 = fromList [(fsk_a3p1,Lookup(OpAccessLevel, p, n))], getVarSet = p n fsk_a3p1}
what is given:
 [OpX ≤ fsk_a3pG] [Lookup(OpAccessLevel, p, n) ~ fsk_a3pG]
what is requested:
 
what is relevant:
 Analysis {getHelper = fromList [(fsk_a3pG,OpX)], getHelper2 = fromList [], getHelper3 = fromList [((p,n),OpX)], getHelper4 = fromList [], getHelper7 = fromList [(fsk_a3pG,Lookup(OpAccessLevel, p, n))], getVarSet = p n fsk_a3pG}
what is given:
 [OpX ≤ fsk_a3pG] [Lookup(OpAccessLevel, p, n) ~ fsk_a3pG]
what is requested:
 [OpR ≤ fsk_a3pG]
what is relevant:
 Analysis {getHelper = fromList [(fsk_a3pG,OpX)], getHelper2 = fromList [], getHelper3 = fromList [((p,n),OpX)], getHelper4 = fromList [], getHelper7 = fromList [(fsk_a3pG,Lookup(OpAccessLevel, p, n))], getVarSet = p n fsk_a3pG}
---here---
what is proven:
 [WD] $d≤_a3pI {0}:: 'R ≤ fsk0 (CDictCan)
what is wanted:
 []

src/Arrays.hs:10:1: warning: [-Wunused-imports]
    The import of ‘Data.Complex’ is redundant
      except perhaps to import instances from ‘Data.Complex’
    To import instances alone, use: import Data.Complex()
   |
10 | import Data.Complex
   | ^^^^^^^^^^^^^^^^^^^

src/Arrays.hs:11:1: warning: [-Wunused-imports]
    The import of ‘Data.Kind’ is redundant
      except perhaps to import instances from ‘Data.Kind’
    To import instances alone, use: import Data.Kind()
   |
11 | import Data.Kind
   | ^^^^^^^^^^^^^^^^

src/Arrays.hs:12:1: warning: [-Wunused-imports]
    The import of ‘System.Random’ is redundant
      except perhaps to import instances from ‘System.Random’
    To import instances alone, use: import System.Random()
   |
12 | import System.Random
   | ^^^^^^^^^^^^^^^^^^^^
Preprocessing executable 'safe-mutation' for safe-mutation-0.1.0.0..
Building executable 'safe-mutation' for safe-mutation-0.1.0.0..
[1 of 1] Compiling Main             ( exe/Main.hs, /home/hugin/Documents/uni/thesis/session-types-experiment/safe-mutation/dist-newstyle/build/x86_64-linux/ghc-8.10.7/safe-mutation-0.1.0.0/x/safe-mutation/build/safe-mutation/safe-mutation-tmp/Main.o ) [Arrays changed]

exe/Main.hs:11:5: error:
    Not in scope: ‘Arrays.example6’
    Module ‘Arrays’ does not export ‘example6’.
   |
11 |     Arrays.example6
   |     ^^^^^^^^^^^^^^^
